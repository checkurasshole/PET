local LogWallBuilderModule = {}

-- Services & Remotes
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local player = Players.LocalPlayer

-- Configuration
LogWallBuilderModule.Config = {
    structureName = "Log Wall",
    radius = 199,
    numWalls = 199,
    buildSpeed = 0,
    isBuilding = false,
    isPaused = false,
    previewEnabled = true,
    maxZoom = 400,
    woodPerWall = 10,
    verificationDelay = 0.2
}

-- Module state
local previewFolder
local connections = {}
local isActive = true
local structuresFolder
local mainFire
local inventory
local CraftItem
local RequestPlaceStructure

function LogWallBuilderModule:Initialize()
    -- Initialize services
    CraftItem = ReplicatedStorage:WaitForChild("RemoteEvents"):WaitForChild("CraftItem")
    RequestPlaceStructure = ReplicatedStorage:WaitForChild("RemoteEvents"):WaitForChild("RequestPlaceStructure")
    inventory = player:WaitForChild("Inventory")
    structuresFolder = workspace:WaitForChild("Structures")
    mainFire = workspace.Map.Campground.MainFire.OuterTouchZone
    
    -- Initialize preview folder
    previewFolder = workspace:FindFirstChild("LogWallBuilderPreview")
    if previewFolder then previewFolder:Destroy() end
    previewFolder = Instance.new("Folder")
    previewFolder.Name = "LogWallBuilderPreview"
    previewFolder.Parent = workspace
    
    -- Cleanup on player leave
    table.insert(connections, game.Players.PlayerRemoving:Connect(function(plr)
        if plr == player then 
            isActive = false
            self.Config.isBuilding = false
            for _, connection in pairs(connections) do
                connection:Disconnect()
            end
            if previewFolder then
                previewFolder:Destroy()
            end
        end
    end))
end

function LogWallBuilderModule:CountAvailableLogs()
    local count = 0
    local itemsFolder = workspace:FindFirstChild("Items")
    
    if itemsFolder then
        for _, item in pairs(itemsFolder:GetChildren()) do
            if item.Name == "Log" then
                count = count + 1
            end
        end
    end
    return count
end

function LogWallBuilderModule:GetAvailableWood()
    local woodTextLabel = workspace.Map.Campground.CraftingBench.WoodSign.SurfaceGui.TextLabel
    local woodText = tostring(woodTextLabel.Text)
    local woodCount = tonumber(woodText) or 0
    return woodCount
end

function LogWallBuilderModule:CountLogWalls()
    local count = 0
    for _, structure in pairs(structuresFolder:GetChildren()) do
        if structure.Name == "Log Wall" then
            count = count + 1
        end
    end
    return count
end

function LogWallBuilderModule:VerifyWallPlaced(expectedCount)
    task.wait(self.Config.verificationDelay)
    local currentCount = self:CountLogWalls()
    return currentCount >= expectedCount
end

function LogWallBuilderModule:CreatePreviewPoint(position, index, total)
    local part = Instance.new("Part")
    part.Name = "PreviewPoint"
    part.Size = Vector3.new(2, 15, 2)
    part.Position = position
    part.Material = Enum.Material.ForceField
    part.Color = Color3.fromRGB(0, 180, 140)
    part.Anchored = true
    part.CanCollide = false
    part.Transparency = 0.6
    part.Parent = previewFolder
    
    local pointLight = Instance.new("PointLight")
    pointLight.Brightness = 0.5
    pointLight.Color = Color3.fromRGB(0, 180, 140)
    pointLight.Range = 8
    pointLight.Parent = part
    
    spawn(function()
        while part.Parent do
            local pulse = math.sin(tick() * 2 + index / total * math.pi * 2) * 0.15 + 0.85
            part.Transparency = 0.6 + (1 - pulse) * 0.2
            pointLight.Brightness = 0.3 + pulse * 0.3
            task.wait(0.05)
        end
    end)
    
    return part
end

function LogWallBuilderModule:GetCenterPosition()
    local firePos = mainFire.Position
    local groundY = firePos.Y - 2
    return Vector3.new(firePos.X, groundY, firePos.Z)
end

function LogWallBuilderModule:CalculateWallPositions()
    local centerPos = self:GetCenterPosition()
    local positions = {}
    
    for i = 1, self.Config.numWalls do
        local angle = (i - 1) * (360 / self.Config.numWalls)
        local angleRad = math.rad(angle)
        
        local xOffset = math.sin(angleRad) * self.Config.radius
        local zOffset = math.cos(angleRad) * self.Config.radius
        
        local position = Vector3.new(
            centerPos.X + xOffset,
            centerPos.Y,
            centerPos.Z + zOffset
        )
        
        table.insert(positions, position)
    end
    
    return positions
end

function LogWallBuilderModule:UpdatePreview()
    if not self.Config.previewEnabled then
        for _, child in pairs(previewFolder:GetChildren()) do
            child:Destroy()
        end
        return
    end
    
    previewFolder:ClearAllChildren()
    
    local positions = self:CalculateWallPositions()
    
    for i, position in pairs(positions) do
        self:CreatePreviewPoint(position, i, #positions)
    end
end

function LogWallBuilderModule:ClearPreview()
    previewFolder:ClearAllChildren()
end

function LogWallBuilderModule:GetLatestInventoryItem()
    local items = inventory:GetChildren()
    if #items == 0 then return nil end
    return items[#items]
end

function LogWallBuilderModule:BuildCircle(structureName, onStatusUpdate)
    if self.Config.isBuilding then
        return false, "Already building"
    end
    
    local availableWood = self:GetAvailableWood()
    local neededWood = self.Config.numWalls * self.Config.woodPerWall
    
    if availableWood < neededWood then
        return false, "Need " .. (neededWood - availableWood) .. " more wood"
    end
    
    self.Config.isBuilding = true
    self.Config.isPaused = false
    
    local centerPos = self:GetCenterPosition()
    local positions = self:CalculateWallPositions()
    local successCount = 0
    local failCount = 0
    local initialWallCount = self:CountLogWalls()
    
    if onStatusUpdate then
        onStatusUpdate("started", {walls = self.Config.numWalls})
    end
    
    for i, position in ipairs(positions) do
        if not self.Config.isBuilding then 
            if onStatusUpdate then
                onStatusUpdate("cancelled", {wallNumber = i})
            end
            break 
        end
        
        while self.Config.isPaused do
            task.wait(0.5)
        end
        
        CraftItem:InvokeServer(structureName)
        task.wait(0.15)
        
        local structureItem = self:GetLatestInventoryItem()
        if not structureItem then
            failCount = failCount + 1
            
            if failCount >= 3 then
                self.Config.isPaused = true
                self.Config.isBuilding = false
                
                if onStatusUpdate then
                    onStatusUpdate("placement_failed", {wallNumber = i})
                end
                
                while self.Config.isPaused do
                    task.wait(0.5)
                end
                
                self.Config.isBuilding = true
                failCount = 0
            end
            continue
        end
        
        local lookDirection = (centerPos - position).Unit
        local rightVector = Vector3.new(0, 1, 0):Cross(lookDirection)
        local upVector = lookDirection:Cross(rightVector)
        
        local wallCFrame = CFrame.fromMatrix(position, rightVector, upVector, lookDirection)
        
        local args = {
            structureItem,
            {
                Valid = true,
                CFrame = wallCFrame,
                Position = position
            },
            wallCFrame
        }
        
        local success = pcall(function()
            RequestPlaceStructure:InvokeServer(unpack(args))
        end)
        
        if not success then
            failCount = failCount + 1
            
            if failCount >= 3 then
                self.Config.isPaused = true
                self.Config.isBuilding = false
                
                if onStatusUpdate then
                    onStatusUpdate("placement_failed", {wallNumber = i})
                end
                
                while self.Config.isPaused do
                    task.wait(0.5)
                end
                
                self.Config.isBuilding = true
                failCount = 0
            end
        else
            local expectedCount = initialWallCount + successCount + 1
            local wasPlaced = self:VerifyWallPlaced(expectedCount)
            
            if wasPlaced then
                successCount = successCount + 1
                failCount = 0
            else
                failCount = failCount + 1
                
                if failCount >= 3 then
                    self.Config.isPaused = true
                    self.Config.isBuilding = false
                    
                    if onStatusUpdate then
                        onStatusUpdate("walls_not_appearing", {wallNumber = i})
                    end
                    
                    while self.Config.isPaused do
                        task.wait(0.5)
                    end
                    
                    self.Config.isBuilding = true
                    failCount = 0
                    initialWallCount = self:CountLogWalls()
                end
            end
        end
        
        if self.Config.buildSpeed > 0 then
            task.wait(self.Config.buildSpeed)
        end
    end
    
    self.Config.isBuilding = false
    self.Config.isPaused = false
    
    if onStatusUpdate then
        onStatusUpdate("complete", {successCount = successCount, total = self.Config.numWalls})
    end
    
    return true, successCount
end

function LogWallBuilderModule:StopBuilding()
    self.Config.isBuilding = false
    self.Config.isPaused = false
end

function LogWallBuilderModule:ContinueBuilding()
    if self.Config.isPaused then
        self.Config.isPaused = false
        return true
    end
    return false
end

return LogWallBuilderModule
