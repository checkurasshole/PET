-- Log Wall Builder Pro - Module Script
-- Host this file on GitHub

local LogWallBuilderModule = {}

function LogWallBuilderModule.Init(WindUI)
    -- Services & Remotes
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local Players = game:GetService("Players")
    local TweenService = game:GetService("TweenService")
    local CraftItem = ReplicatedStorage:WaitForChild("RemoteEvents"):WaitForChild("CraftItem")
    local RequestPlaceStructure = ReplicatedStorage:WaitForChild("RemoteEvents"):WaitForChild("RequestPlaceStructure")
    local ClassStatUpdated = ReplicatedStorage:WaitForChild("RemoteEvents"):WaitForChild("ClassStatUpdated")
    local player = Players.LocalPlayer
    local inventory = player:WaitForChild("Inventory")

    -- Configuration
    local Config = {
        structureName = "Log Wall",
        radius = 6,
        numWalls = 12,
        buildSpeed = 0.1,
        teleportToStructure = false,
        isBuilding = false,
        previewEnabled = true,
        skyMode = false,
        centerX = 0,
        centerZ = 0,
        centerY = 0,
        tilt = 0,
        maxZoom = 400,
        woodPerWall = 10
    }

    -- Initialize preview folder
    local previewFolder = workspace:FindFirstChild("BuilderPreview")
    if previewFolder then previewFolder:Destroy() end
    previewFolder = Instance.new("Folder")
    previewFolder.Name = "BuilderPreview"
    previewFolder.Parent = workspace

    local connections = {}
    local isActive = true
    local resourceButton, requiredButton

    -- Resource tracking functions
    local function countAvailableLogs()
        local count = 0
        local itemsFolder = workspace:FindFirstChild("Items")
        
        if itemsFolder then
            for _, item in pairs(itemsFolder:GetChildren()) do
                if item.Name == "Log" then
                    count = count + 1
                end
            end
        end
        return count
    end

    local function getAvailableWood()
        local woodTextLabel = workspace.Map.Campground.CraftingBench.WoodSign.SurfaceGui.TextLabel
        local woodText = tostring(woodTextLabel.Text)
        local woodCount = tonumber(woodText) or 0
        return woodCount
    end

    local function updateResourceDisplay()
        local availableLogs = countAvailableLogs()
        local availableWood = getAvailableWood()
        local totalWallsNeeded = Config.numWalls
        local woodPerWall = Config.woodPerWall
        local totalWoodNeeded = totalWallsNeeded * woodPerWall
        local currentTime = os.date("%H:%M:%S")
        
        if resourceButton then
            resourceButton:SetTitle("Available Resources")
            resourceButton:SetDesc("Logs: " .. availableLogs .. " | Wood: " .. availableWood .. " | Updated: " .. currentTime)
        end
        
        if requiredButton then
            local hasEnoughWood = availableWood >= totalWoodNeeded
            local status = hasEnoughWood and "✓ READY TO BUILD" or "✗ NEED MORE WOOD"
            local missingWood = math.max(0, totalWoodNeeded - availableWood)
            
            local desc = "Building " .. totalWallsNeeded .. " walls × " .. woodPerWall .. " wood each\n"
            desc = desc .. status
            if missingWood > 0 then
                desc = desc .. " • Missing: " .. missingWood .. " wood"
                local logsNeededForWood = math.ceil(missingWood / 5)
                desc = desc .. "\n(Need ~" .. logsNeededForWood .. " more logs to craft missing wood)"
            else
                desc = desc .. " • You have enough wood!"
            end
            
            requiredButton:SetTitle("Required: " .. totalWoodNeeded .. " wood total")
            requiredButton:SetDesc(desc)
        end
    end

    -- Preview Functions
    local function createPreviewPoint(position, color)
        local part = Instance.new("Part")
        part.Name = "PreviewPoint"
        part.Size = Vector3.new(3, 12, 3)
        part.Position = position
        part.Material = Enum.Material.Neon
        part.Color = color
        part.Anchored = true
        part.CanCollide = false
        part.Transparency = 0.2
        part.Parent = previewFolder
        
        return part
    end

    local function applyTilt(points, tilt)
        if tilt == 0 then return points end
        
        local tiltedPoints = {}
        local cos_t = math.cos(math.rad(tilt))
        local sin_t = math.sin(math.rad(tilt))
        
        for _, point in pairs(points) do
            local x, y, z = point.X, point.Y, point.Z
            local newY = y * cos_t - z * sin_t
            local newZ = y * sin_t + z * cos_t
            table.insert(tiltedPoints, Vector3.new(x, newY, newZ))
        end
        
        return tiltedPoints
    end

    local function getCenterPosition()
        local char = player.Character
        if not char or not char:FindFirstChild("HumanoidRootPart") then
            return CFrame.new(Config.centerX, Config.centerY, Config.centerZ)
        end
        
        local root = char.HumanoidRootPart
        
        if Config.centerX ~= 0 or Config.centerZ ~= 0 then
            return CFrame.new(Config.centerX, root.Position.Y + Config.centerY, Config.centerZ)
        end
        
        return root.CFrame * CFrame.new(0, Config.centerY, 0)
    end

    local function calculateWallPositions()
        local centerCFrame = getCenterPosition()
        local positions = {}
        
        local groundY
        if Config.skyMode then
            groundY = 100
        else
            local terrainPos = centerCFrame.Position
            local rayOrigin = Vector3.new(terrainPos.X, 500, terrainPos.Z)
            local rayDirection = Vector3.new(0, -1000, 0)
            
            local raycastParams = RaycastParams.new()
            raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
            raycastParams.FilterDescendantsInstances = {previewFolder, player.Character}
            
            local rayResult = workspace:Raycast(rayOrigin, rayDirection, raycastParams)
            
            if rayResult then
                groundY = rayResult.Position.Y
            else
                groundY = terrainPos.Y
            end
        end
        
        for i = 1, Config.numWalls do
            local angle = (i - 1) * (360 / Config.numWalls)
            local angleRad = math.rad(angle)
            
            local xOffset = math.sin(angleRad) * Config.radius
            local zOffset = math.cos(angleRad) * Config.radius
            
            local position = Vector3.new(
                centerCFrame.Position.X + xOffset,
                groundY + Config.centerY,
                centerCFrame.Position.Z + zOffset
            )
            
            if Config.tilt ~= 0 then
                local relativePos = position - centerCFrame.Position
                local tiltedPoints = applyTilt({relativePos}, Config.tilt)
                position = centerCFrame.Position + tiltedPoints[1]
            end
            
            table.insert(positions, position)
        end
        
        return positions
    end

    local function updatePreview()
        if not Config.previewEnabled then
            for _, child in pairs(previewFolder:GetChildren()) do
                child:Destroy()
            end
            return
        end
        
        previewFolder:ClearAllChildren()
        
        local positions = calculateWallPositions()
        
        for _, position in pairs(positions) do
            createPreviewPoint(position, Color3.fromRGB(255, 100, 150))
        end
    end

    local function getLatestInventoryItem()
        local items = inventory:GetChildren()
        if #items == 0 then return nil end
        return items[#items]
    end

    local function buildStructure(name, teleportToStructure)
        local char = player.Character or player.CharacterAdded:Wait()
        local root = char:WaitForChild("HumanoidRootPart")
        
        CraftItem:InvokeServer(name)
        task.wait(0.2)
        
        local structureItem = getLatestInventoryItem()
        if not structureItem then
            warn("No structure item found in inventory for "..name)
            return
        end
        
        local placeCFrame = root.CFrame * CFrame.new(0, 0, -5)
        local pos = placeCFrame.Position
        
        local args = {
            structureItem,
            {
                Valid = true,
                CFrame = placeCFrame,
                Position = pos
            },
            placeCFrame
        }
        
        RequestPlaceStructure:InvokeServer(unpack(args))
        firesignal(ClassStatUpdated.OnClientEvent, "Blacksmith", "BuildStructures", 13, 1)
        
        if teleportToStructure then
            task.wait(0.5)
            root.CFrame = placeCFrame * CFrame.new(0, 0, 3)
        end
    end

    local function surroundCharacter(structureName)
        if Config.isBuilding then
            WindUI:Notify({
                Title = "Already Building",
                Content = "Please wait for current build to finish",
                Icon = "alert-circle",
                Duration = 3
            })
            return
        end
        
        local availableWood = getAvailableWood()
        local neededWood = Config.numWalls * Config.woodPerWall
        
        if availableWood < neededWood then
            WindUI:Notify({
                Title = "Not Enough Wood!",
                Content = "Need " .. (neededWood - availableWood) .. " more wood",
                Icon = "x-circle",
                Duration = 5
            })
            return
        end
        
        Config.isBuilding = true
        
        local centerCFrame = getCenterPosition()
        
        WindUI:Notify({
            Title = "Building Started",
            Content = "Placing " .. Config.numWalls .. " walls",
            Icon = "hammer",
            Duration = 2
        })
        
        local positions = calculateWallPositions()
        
        for i, position in ipairs(positions) do
            if not Config.isBuilding then break end
            
            CraftItem:InvokeServer(structureName)
            task.wait(0.2)
            
            local structureItem = getLatestInventoryItem()
            if not structureItem then
                warn("No structure item found for " .. structureName)
                continue
            end
            
            local centerPos = centerCFrame.Position
            local lookDirection = (centerPos - position).Unit
            local rightVector = Vector3.new(0, 1, 0):Cross(lookDirection)
            local upVector = lookDirection:Cross(rightVector)
            
            local wallCFrame = CFrame.fromMatrix(position, rightVector, upVector, lookDirection)
            
            local args = {
                structureItem,
                {
                    Valid = true,
                    CFrame = wallCFrame,
                    Position = position
                },
                wallCFrame
            }
            
            RequestPlaceStructure:InvokeServer(unpack(args))
            task.wait(Config.buildSpeed)
        end
        
        firesignal(ClassStatUpdated.OnClientEvent, "Blacksmith", "BuildStructures", 13, Config.numWalls)
        Config.isBuilding = false
        
        updateResourceDisplay()
        
        WindUI:Notify({
            Title = "Building Complete!",
            Content = "Placed " .. Config.numWalls .. " walls",
            Icon = "check-circle",
            Duration = 3
        })
    end

    -- Return functions and config for UI setup
    return {
        Config = Config,
        updateResourceDisplay = updateResourceDisplay,
        updatePreview = updatePreview,
        buildStructure = buildStructure,
        surroundCharacter = surroundCharacter,
        previewFolder = previewFolder,
        connections = connections,
        isActive = isActive,
        setResourceButton = function(btn) resourceButton = btn end,
        setRequiredButton = function(btn) requiredButton = btn end,
        setIsActive = function(val) isActive = val end,
        player = player
    }
end

return LogWallBuilderModule
