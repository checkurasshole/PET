-- Main Script - Plant & House Builder Pro with Correct WindUI Implementation
-- Replace "YOUR_GITHUB_USERNAME" and "YOUR_REPO_NAME" with your actual GitHub details

-- Load WindUI (correct URL from documentation)
local WindUI = loadstring(game:HttpGet("https://raw.githubusercontent.com/Footagesus/WindUI/main/dist/main.lua"))()

-- Load the module from GitHub (REPLACE WITH YOUR GITHUB LINK)
local PlantHouseBuilder = loadstring(game:HttpGet("https://raw.githubusercontent.com/checkurasshole/Script/refs/heads/main/9999"))()

local Players = game:GetService("Players")
local player = Players.LocalPlayer

-- Set WindUI theme
WindUI:SetTheme("Dark")

-- Create WindUI Window (proper syntax from examples)
local Window = WindUI:CreateWindow({
    Title = "Plant & House Builder Pro",
    Icon = "hammer",
    Author = "Fast Build - Mob Defense",
    Folder = "PlantHouseBuilderConfig",
    Size = UDim2.fromOffset(420, 380),
    Theme = "Dark",
    Transparent = true,
    SideBarWidth = 120,
    HideSearchBar = false
})

-- Add version tag
Window:Tag({
    Title = "v2.0",
    Color = Color3.fromHex("#30ff6a"),
    Radius = 5
})

-- Create single tab
local MainTab = Window:Tab({
    Title = "Builder",
    Icon = "hammer"
})

-- Resource tracking variables
local resourceButton, requiredButton

local function updateResourceDisplay()
    local available = PlantHouseBuilder.countAvailableItems(PlantHouseBuilder.config.itemFilter)
    local currentTime = os.date("%H:%M:%S")
    
    local totalRequired = 0
    local breakdown = ""
    
    if PlantHouseBuilder.config.plantShape ~= "none" and PlantHouseBuilder.shapes[PlantHouseBuilder.config.plantShape] then
        local plantPoints = PlantHouseBuilder.shapes[PlantHouseBuilder.config.plantShape](PlantHouseBuilder.config.size, PlantHouseBuilder.config.density)
        totalRequired = totalRequired + #plantPoints
        breakdown = breakdown .. "Plants: " .. #plantPoints .. "\n"
    end
    
    if PlantHouseBuilder.config.houseType ~= "none" and PlantHouseBuilder.houses[PlantHouseBuilder.config.houseType] then
        local housePoints = PlantHouseBuilder.houses[PlantHouseBuilder.config.houseType](PlantHouseBuilder.config.size)
        totalRequired = totalRequired + #housePoints
        breakdown = breakdown .. "House blocks: " .. #housePoints .. "\n"
    end
    
    if resourceButton then
        resourceButton:SetTitle("You have " .. available .. " " .. PlantHouseBuilder.config.itemFilter .. " items available")
        resourceButton:SetDesc("Last checked: " .. currentTime)
    end
    
    if requiredButton then
        if totalRequired > 0 then
            local status = available >= totalRequired and "ENOUGH ITEMS" or "NEED MORE ITEMS"
            local missing = math.max(0, totalRequired - available)
            
            requiredButton:SetTitle(breakdown .. "Total needed: " .. totalRequired)
            requiredButton:SetDesc(status .. (missing > 0 and " • Missing: " .. missing .. " items" or " • Ready to build!"))
        else
            requiredButton:SetTitle("Required Items")
            requiredButton:SetDesc("Select a plant shape or house type to see requirements")
        end
    end
end

-- Resource display buttons
resourceButton = MainTab:Button({
    Title = "Available Items",
    Desc = "Loading...",
    Icon = "package",
    Callback = function()
        updateResourceDisplay()
        WindUI:Notify({
            Title = "Resources Updated",
            Content = "Item counts have been refreshed",
            Icon = "refresh-cw",
            Duration = 2
        })
    end
})

requiredButton = MainTab:Button({
    Title = "Required Items", 
    Desc = "Select something to build...",
    Icon = "info",
    Callback = function() end
})

MainTab:Button({
    Title = "Refresh Count",
    Desc = "",
    Icon = "refresh-cw",
    Callback = function()
        updateResourceDisplay()
        WindUI:Notify({
            Title = "Resources Updated",
            Content = "",
            Icon = "refresh-cw",
            Duration = 2
        })
    end
})

-- Start resource tracking
spawn(function()
    while PlantHouseBuilder.isActive do
        updateResourceDisplay()
        wait(10)
    end
end)

MainTab:Space()

-- Plant Shape Dropdown
MainTab:Dropdown({
    Title = "Plant Shape",
    Desc = "",
    Values = {"none", "circle", "square", "star"},
    Value = PlantHouseBuilder.config.plantShape,
    Callback = function(value)
        PlantHouseBuilder.config.plantShape = value
        PlantHouseBuilder.updatePreview()
        updateResourceDisplay()
    end
})

-- House Type Dropdown
MainTab:Dropdown({
    Title = "House Type",
    Desc = "",
    Values = {"none", "small_house", "large_house", "castle", "fortress"},
    Value = PlantHouseBuilder.config.houseType,
    Callback = function(value)
        PlantHouseBuilder.config.houseType = value
        PlantHouseBuilder.updatePreview()
        updateResourceDisplay()
    end
})

MainTab:Space()

-- Size Slider
MainTab:Slider({
    Title = "Size",
    Desc = "",
    Value = {
        Min = 20,
        Max = 150,
        Default = PlantHouseBuilder.config.size
    },
    Callback = function(value)
        PlantHouseBuilder.config.size = value
        PlantHouseBuilder.updatePreview()
        updateResourceDisplay()
    end
})

-- Plant Count Slider
MainTab:Slider({
    Title = "Plant Count",
    Desc = "",
    Value = {
        Min = 5,
        Max = 80,
        Default = PlantHouseBuilder.config.density
    },
    Callback = function(value)
        PlantHouseBuilder.config.density = value
        PlantHouseBuilder.updatePreview()
        updateResourceDisplay()
    end
})

MainTab:Space()

-- Position Sliders
MainTab:Slider({
    Title = "X Position",
    Desc = "",
    Value = {
        Min = -300,
        Max = 300,
        Default = PlantHouseBuilder.config.centerX
    },
    Callback = function(value)
        PlantHouseBuilder.config.centerX = value
        PlantHouseBuilder.updatePreview()
    end
})

MainTab:Slider({
    Title = "Z Position",
    Desc = "",
    Value = {
        Min = -300,
        Max = 300,
        Default = PlantHouseBuilder.config.centerZ
    },
    Callback = function(value)
        PlantHouseBuilder.config.centerZ = value
        PlantHouseBuilder.updatePreview()
    end
})

MainTab:Slider({
    Title = "Y Position (Height)",
    Desc = "",
    Value = {
        Min = -50,
        Max = 100,
        Default = PlantHouseBuilder.config.centerY
    },
    Callback = function(value)
        PlantHouseBuilder.config.centerY = value
        PlantHouseBuilder.updatePreview()
    end
})

-- Tilt Slider
MainTab:Slider({
    Title = "Tilt",
    Desc = "",
    Value = {
        Min = -90,
        Max = 90,
        Default = PlantHouseBuilder.config.tilt
    },
    Callback = function(value)
        PlantHouseBuilder.config.tilt = value
        PlantHouseBuilder.updatePreview()
    end
})

-- Use Player Position Button
MainTab:Button({
    Title = "Use Player Position",
    Desc = "",
    Icon = "map-pin",
    Callback = function()
        if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local pos = player.Character.HumanoidRootPart.Position
            PlantHouseBuilder.config.centerX = math.floor(pos.X)
            PlantHouseBuilder.config.centerZ = math.floor(pos.Z)
            PlantHouseBuilder.updatePreview()
            
            WindUI:Notify({
                Title = "Position Updated",
                Content = "Set to player position",
                Icon = "map-pin",
                Duration = 2
            })
        end
    end
})

MainTab:Space()

-- Item Filter Input
MainTab:Input({
    Title = "Item Filter",
    Desc = "",
    Placeholder = "sap",
    Value = PlantHouseBuilder.config.itemFilter,
    Icon = "search",
    Callback = function(value)
        PlantHouseBuilder.config.itemFilter = value
        updateResourceDisplay()
    end
})

-- Build Speed Slider
MainTab:Slider({
    Title = "Build Speed (Fast)",
    Desc = "",
    Value = {
        Min = 5,
        Max = 50,
        Default = PlantHouseBuilder.config.buildSpeed
    },
    Callback = function(value)
        PlantHouseBuilder.config.buildSpeed = value
    end
})

-- Preview Toggle
MainTab:Toggle({
    Title = "Show Preview",
    Desc = "",
    Value = PlantHouseBuilder.config.previewEnabled,
    Callback = function(state)
        PlantHouseBuilder.config.previewEnabled = state
        PlantHouseBuilder.updatePreview()
    end
})

-- Sky Mode Toggle
MainTab:Toggle({
    Title = "Sky Mode",
    Desc = "",
    Value = PlantHouseBuilder.config.skyMode,
    Callback = function(state)
        PlantHouseBuilder.config.skyMode = state
        PlantHouseBuilder.updatePreview()
    end
})

-- Max Zoom Slider
MainTab:Slider({
    Title = "Max Zoom Distance",
    Desc = "",
    Value = {
        Min = 50,
        Max = 2000,
        Default = PlantHouseBuilder.config.maxZoom
    },
    Callback = function(value)
        PlantHouseBuilder.config.maxZoom = value
        player.CameraMaxZoomDistance = value
    end
})

MainTab:Space()

-- Start Building Button
MainTab:Button({
    Title = "START BUILDING",
    Desc = "",
    Icon = "play",
    Color = Color3.fromHex("#30ff6a"),
    Callback = function()
        if PlantHouseBuilder.config.isBuilding then
            WindUI:Notify({
                Title = "Already Building",
                Content = "Please wait for current build to finish",
                Icon = "alert-circle",
                Duration = 3
            })
            return
        end
        
        local allPoints = {}
        
        -- Add plant points
        if PlantHouseBuilder.config.plantShape ~= "none" and PlantHouseBuilder.shapes[PlantHouseBuilder.config.plantShape] then
            local plantPoints = PlantHouseBuilder.shapes[PlantHouseBuilder.config.plantShape](PlantHouseBuilder.config.size, PlantHouseBuilder.config.density)
            for _, point in pairs(plantPoints) do
                table.insert(allPoints, point)
            end
        end
        
        -- Add house points
        if PlantHouseBuilder.config.houseType ~= "none" and PlantHouseBuilder.houses[PlantHouseBuilder.config.houseType] then
            local housePoints = PlantHouseBuilder.houses[PlantHouseBuilder.config.houseType](PlantHouseBuilder.config.size)
            for _, point in pairs(housePoints) do
                table.insert(allPoints, point)
            end
        end
        
        if #allPoints > 0 then
            local available = PlantHouseBuilder.countAvailableItems(PlantHouseBuilder.config.itemFilter)
            if available < #allPoints then
                WindUI:Notify({
                    Title = "Not Enough Items!",
                    Content = "Need " .. (#allPoints - available) .. " more items",
                    Icon = "x-circle",
                    Duration = 5
                })
                return
            end
            
            PlantHouseBuilder.buildAtPositions(allPoints)
            WindUI:Notify({
                Title = "Building Started!",
                Content = "Building " .. #allPoints .. " blocks",
                Icon = "hammer",
                Duration = 3
            })
        else
            WindUI:Notify({
                Title = "Nothing Selected",
                Content = "Please select a plant shape or house type",
                Icon = "alert-triangle",
                Duration = 3
            })
        end
    end
})

-- Stop Building Button
MainTab:Button({
    Title = "STOP BUILDING",
    Desc = "",
    Icon = "square",
    Color = Color3.fromHex("#ff4830"),
    Callback = function()
        PlantHouseBuilder.config.isBuilding = false
        PlantHouseBuilder.config.pendingPositions = {}
        WindUI:Notify({
            Title = "Building Stopped",
            Content = "All pending builds cancelled",
            Icon = "square",
            Duration = 2
        })
    end
})

-- Clear Preview Button
MainTab:Button({
    Title = "Clear Preview",
    Desc = "",
    Icon = "trash-2",
    Callback = function()
        PlantHouseBuilder.previewFolder:ClearAllChildren()
        WindUI:Notify({
            Title = "Preview Cleared",
            Content = "",
            Icon = "trash-2",
            Duration = 2
        })
    end
})

-- Cleanup on player leaving
table.insert(PlantHouseBuilder.connections, game.Players.PlayerRemoving:Connect(function(plr)
    if plr == player then 
        PlantHouseBuilder.cleanup() 
    end
end))

-- Initial setup
updateResourceDisplay()
PlantHouseBuilder.updatePreview()

-- Success notification
WindUI:Notify({
    Title = "Builder Loaded!",
    Content = "Plant & House Builder Pro is ready to use",
    Icon = "check-circle",
    Duration = 3
})
